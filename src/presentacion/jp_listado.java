/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package presentacion;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Collections;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.hssf.util.CellReference;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellValue;
import org.apache.poi.ss.usermodel.FormulaEvaluator;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import persistencia.consultas;

/**
 *
 * @author e274263
 */
public class jp_listado extends javax.swing.JPanel {

    ArrayList<String> listado_departamentos = new ArrayList<>();
    ArrayList<String> listado_tipo_dispositivos = new ArrayList<>();

    /**
     * Creates new form jp_ingreso_nuevo
     */
    public jp_listado() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        cmb_tipo_direccion = new javax.swing.JComboBox<>();
        txt_tipo_direccion = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl_listado = new javax.swing.JTable();

        setBorder(javax.swing.BorderFactory.createEtchedBorder());
        setPreferredSize(new java.awt.Dimension(986, 274));

        jButton1.setText("GENERAR");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("LIMPIAR");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel3.setText("FILTRO:");

        cmb_tipo_direccion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " ", "DHCP", "IP FIJA" }));

        txt_tipo_direccion.setEditable(false);

        tbl_listado.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tbl_listado);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(82, 82, 82)
                        .addComponent(cmb_tipo_direccion, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_tipo_direccion, javax.swing.GroupLayout.DEFAULT_SIZE, 457, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addContainerGap(70, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(cmb_tipo_direccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_tipo_direccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(10, 10, 10))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        /*
        String codigo_ubicacion, codigo_red, codigo_dispositivo;
        codigo_ubicacion = devuelve_codigo_ubicacion((String) cmb_departamento.getSelectedItem());
        codigo_red = devuelve_codigo_red((String) cmb_departamento.getSelectedItem());
        codigo_dispositivo = devuelve_codigo_dispositivo((String) cmb_tipo.getSelectedItem()); //0 PC (PUEDE SER 1 TAMBIEN, AUN NO ESTA IMPLEMENTADA ESA OPCION)

        ArrayList<String> lista = devuelve_lista_segun_tipo_dispositivo(codigo_ubicacion, codigo_red, codigo_dispositivo);

        if (lista == null || lista.isEmpty()) {
            txtvalor.setText("Codigo generado para " + (String) cmb_tipo.getSelectedItem() + " " + devuelve_ubicacion((String) cmb_departamento.getSelectedItem()) + " " + nuevo_codigo(codigo_ubicacion, codigo_red, codigo_dispositivo));
        } else {
            presentar_resultado(lista);
        }
        */
    }//GEN-LAST:event_jButton1ActionPerformed

    String nuevo_codigo(String codigo_ubicacion, String codigo_red, String codigo_dispositivo) {
        return codigo_ubicacion + codigo_red + codigo_dispositivo + "0001";
    }


    String devuelve_ubicacion(String texto) {
        String[] cortarString_seleccion = texto.split("::");

        return cortarString_seleccion[1] + " " + cortarString_seleccion[2];

    }

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        //cmb_departamento.setSelectedIndex(0);

    }//GEN-LAST:event_jButton2ActionPerformed

    String devuelve_ultimos_4_caracteres(String texto) {
        return texto.substring(texto.length() - 4, texto.length());
    }


    String devuelve_observacion(String texto) {
        if (!texto.equals("")) {
            return "::" + texto;
        }
        return "";
    }

    
    Integer convertir_texto_a_numero(String texto) {
        if (texto.isEmpty() || texto.equals("")) {
            return -1;
        }
        boolean isNumeric = texto.matches("[+-]?\\d*(\\.\\d+)?");
        if (!isNumeric) {
            return -1;
        }
        //Float id=Float.parseFloat(texto);
        int i = new Double(texto).intValue();

        return i;
    }

    String chequear_string_null(Object texto) throws Exception {

        if (texto == null) {
            return "";
        }
        return texto.toString();
    }

    String chequear_formula(Workbook wb, Sheet hoja, Cell texto, int fila) throws Exception {
        FormulaEvaluator evaluator = wb.getCreationHelper().createFormulaEvaluator();

        //System.out.println(fila);
        CellReference cellReference = new CellReference("I" + fila); // pass the cell which contains the formula Row row = sheet.getRow(cellReference.getRow()); Cell cell = row.getCell(cellReference.getCol()); CellValue cellValue = evaluator.evaluate(cell); System.out.println("Cell type month is "+cellValue.getCellTypeEnum()); System.out.println("getNumberValue month is "+cellValue.getNumberValue());

        Row row = hoja.getRow(cellReference.getRow());
        Cell cell = row.getCell(cellReference.getCol());
        CellValue cellValue = evaluator.evaluate(cell);
        System.out.println(fila + " --- " + cellValue.getStringValue());
        //assertEquals("3", strValue);
        return cellValue.getStringValue();
    }

    String devuelve_codigo_ubicacion(String texto) {
        String[] cortarString_seleccion = texto.split("::");
        for (int i = 0; i < listado_departamentos.size(); i++) {
            String[] cortarString_listado = listado_departamentos.get(i).split("::");
            if (cortarString_listado[0].equals(cortarString_seleccion[0])) {
                return cortarString_listado[3];
            }
        }
        return "";
    }

    String devuelve_codigo_red(String texto) {
        String[] cortarString_seleccion = texto.split("::");
        for (int i = 0; i < listado_departamentos.size(); i++) {
            String[] cortarString_listado = listado_departamentos.get(i).split("::");
            if (cortarString_listado[0].equals(cortarString_seleccion[0])) {
                return cortarString_listado[4];
            }
        }
        return "";
    }

    String devuelve_codigo_dispositivo(String texto) {
        //String[] cortarString_seleccion = dispositivo.split("::");
        for (int i = 0; i < listado_tipo_dispositivos.size(); i++) {
            String[] cortarString_listado = listado_tipo_dispositivos.get(i).split("::");
            if (cortarString_listado[1].equals(texto)) {
                return cortarString_listado[0];
            }
        }
        return "";
    }

    ArrayList<String> devuelve_listado_PC(String ubicacion, String red, String tipo_dispositivo) {
        InputStream excelStream = null;
        ArrayList<String> lista = new ArrayList<>();

        try {
            Boolean ya_paso_primer_columna = false;
            excelStream = new FileInputStream(new File("Administracion IP.xls"));
            // High level representation of a workbook.
            // Representación del más alto nivel de la hoja excel.
            HSSFWorkbook hssfWorkbook = new HSSFWorkbook(excelStream);
            // We chose the sheet is passed as parameter. 
            // Elegimos la hoja que se pasa por parámetro.
            HSSFSheet hssfSheet = hssfWorkbook.getSheetAt(1);//reemplazar por hoja 0, que tiene codigos deptos e ip, etc
            // An object that allows us to read a row of the excel sheet, and extract from it the cell contents.
            // Objeto que nos permite leer un fila de la hoja excel, y de aquí extraer el contenido de las celdas.
            HSSFRow hssfRow;
            // Initialize the object to read the value of the cell 
            // Inicializo el objeto que leerá el valor de la celda
            HSSFCell cell;
            // I get the number of rows occupied on the sheet
            // Obtengo el número de filas ocupadas en la hoja
            int rows = hssfSheet.getLastRowNum();
            // I get the number of columns occupied on the sheet
            // Obtengo el número de columnas ocupadas en la hoja
            int cols = 0;
            // A string used to store the reading cell
            // Cadena que usamos para almacenar la lectura de la celda
            FormulaEvaluator evaluator = hssfWorkbook.getCreationHelper().createFormulaEvaluator();
            // For this example we'll loop through the rows getting the data we want
            // Para este ejemplo vamos a recorrer las filas obteniendo los datos que queremos    
            //System.out.println("INICIO");
            for (int fila = 0; fila <= rows; fila++) {
                //System.out.println(fila);
                hssfRow = hssfSheet.getRow(fila);
                if (hssfRow == null) {
                    break;
                } else {
                    //for (short c = 0; c < (cols = hssfRow.getLastCellNum()); c++) {
                    if (fila == 0) {
                        //PARA QUE SALTEE LA PRIMER FILA QUE TIENE EL TITULO
                        if (!ya_paso_primer_columna) {
                            ya_paso_primer_columna = true;
                        }
                        continue;
                    }
                    if ((hssfRow.getCell(8)) == null) {
                        continue;
                    }
                    if (hssfRow.getCell(8).getCellType() == Cell.CELL_TYPE_FORMULA) {
                        switch (hssfRow.getCell(8).getCachedFormulaResultType()) {
                            case Cell.CELL_TYPE_NUMERIC:
                                CellReference cellReference = new CellReference("I" + (fila));
                                Row row = hssfSheet.getRow(fila);
                                Cell cell1 = row.getCell(cellReference.getCol());
                                CellValue cellValue = evaluator.evaluate(cell1);
                                if (coincide_ubicacion(ubicacion, red, tipo_dispositivo, chequear_string_null(cellValue.getStringValue()))) {
                                    //System.out.println(chequear_string_null(cellValue.getStringValue()));
                                    lista.add(chequear_string_null(cellValue.getStringValue()));
                                }
                                break;
                        }
                    }

                }
            }
        } catch (FileNotFoundException fileNotFoundException) {
            System.out.println("The file not exists (No se encontró el fichero): " + fileNotFoundException);
        } catch (IOException ex) {
            System.out.println("Error in file procesing (Error al procesar el fichero): " + ex);
        } catch (Exception ex) {
            Logger.getLogger(jp_listado.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                excelStream.close();
            } catch (IOException ex) {
                System.out.println("Error in file processing after close it (Error al procesar el fichero después de cerrarlo): " + ex);
            }
        }
        //System.out.println("FIN");
        return lista;
    }

    ArrayList<String> devuelve_listado_Serv_Impresion(String ubicacion, String red, String tipo_dispositivo) {
        InputStream excelStream = null;
        ArrayList<String> lista = new ArrayList<>();

        try {
            Boolean ya_paso_primer_columna = false;
            excelStream = new FileInputStream(new File("Administracion IP.xls"));
            // High level representation of a workbook.
            // Representación del más alto nivel de la hoja excel.
            HSSFWorkbook hssfWorkbook = new HSSFWorkbook(excelStream);
            // We chose the sheet is passed as parameter. 
            // Elegimos la hoja que se pasa por parámetro.
            HSSFSheet hssfSheet = hssfWorkbook.getSheetAt(2);//reemplazar por hoja 0, que tiene codigos deptos e ip, etc
            // An object that allows us to read a row of the excel sheet, and extract from it the cell contents.
            // Objeto que nos permite leer un fila de la hoja excel, y de aquí extraer el contenido de las celdas.
            HSSFRow hssfRow;
            // Initialize the object to read the value of the cell 
            // Inicializo el objeto que leerá el valor de la celda
            HSSFCell cell;
            // I get the number of rows occupied on the sheet
            // Obtengo el número de filas ocupadas en la hoja
            int rows = hssfSheet.getLastRowNum();
            // I get the number of columns occupied on the sheet
            // Obtengo el número de columnas ocupadas en la hoja
            int cols = 0;
            // A string used to store the reading cell
            // Cadena que usamos para almacenar la lectura de la celda
            FormulaEvaluator evaluator = hssfWorkbook.getCreationHelper().createFormulaEvaluator();
            // For this example we'll loop through the rows getting the data we want
            // Para este ejemplo vamos a recorrer las filas obteniendo los datos que queremos    
            //System.out.println("INICIO");
            for (int fila = 0; fila <= rows; fila++) {
                //System.out.println(fila);
                hssfRow = hssfSheet.getRow(fila);
                if (hssfRow == null) {
                    break;
                } else {
                    //for (short c = 0; c < (cols = hssfRow.getLastCellNum()); c++) {
                    if (fila == 0) {
                        //PARA QUE SALTEE LA PRIMER FILA QUE TIENE EL TITULO
                        if (!ya_paso_primer_columna) {
                            ya_paso_primer_columna = true;
                        }
                        continue;
                    }
                    if ((hssfRow.getCell(8)) == null) {
                        continue;
                    }
                    if (hssfRow.getCell(8).getCellType() == Cell.CELL_TYPE_FORMULA) {
                        switch (hssfRow.getCell(8).getCachedFormulaResultType()) {
                            case Cell.CELL_TYPE_NUMERIC:
                                CellReference cellReference = new CellReference("I" + (fila));
                                Row row = hssfSheet.getRow(fila);
                                Cell cell1 = row.getCell(cellReference.getCol());
                                CellValue cellValue = evaluator.evaluate(cell1);
                                if (coincide_ubicacion(ubicacion, red, tipo_dispositivo, chequear_string_null(cellValue.getStringValue()))) {
                                    //System.out.println(chequear_string_null(cellValue.getStringValue()));
                                    lista.add(chequear_string_null(cellValue.getStringValue()));
                                }
                                break;
                        }
                    }

                }
            }
        } catch (FileNotFoundException fileNotFoundException) {
            System.out.println("The file not exists (No se encontró el fichero): " + fileNotFoundException);
        } catch (IOException ex) {
            System.out.println("Error in file procesing (Error al procesar el fichero): " + ex);
        } catch (Exception ex) {
            Logger.getLogger(jp_listado.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                excelStream.close();
            } catch (IOException ex) {
                System.out.println("Error in file processing after close it (Error al procesar el fichero después de cerrarlo): " + ex);
            }
        }
        //System.out.println("FIN");
        return lista;
    }

    ArrayList<String> devuelve_listado_Print_Servers(String ubicacion, String red, String tipo_dispositivo) {
        InputStream excelStream = null;
        ArrayList<String> lista = new ArrayList<>();

        try {
            Boolean ya_paso_primer_columna = false;
            excelStream = new FileInputStream(new File("Administracion IP.xls"));
            // High level representation of a workbook.
            // Representación del más alto nivel de la hoja excel.
            HSSFWorkbook hssfWorkbook = new HSSFWorkbook(excelStream);
            // We chose the sheet is passed as parameter. 
            // Elegimos la hoja que se pasa por parámetro.
            HSSFSheet hssfSheet = hssfWorkbook.getSheetAt(3);//reemplazar por hoja 0, que tiene codigos deptos e ip, etc
            // An object that allows us to read a row of the excel sheet, and extract from it the cell contents.
            // Objeto que nos permite leer un fila de la hoja excel, y de aquí extraer el contenido de las celdas.
            HSSFRow hssfRow;
            // Initialize the object to read the value of the cell 
            // Inicializo el objeto que leerá el valor de la celda
            HSSFCell cell;
            // I get the number of rows occupied on the sheet
            // Obtengo el número de filas ocupadas en la hoja
            int rows = hssfSheet.getLastRowNum();
            // I get the number of columns occupied on the sheet
            // Obtengo el número de columnas ocupadas en la hoja
            int cols = 0;
            // A string used to store the reading cell
            // Cadena que usamos para almacenar la lectura de la celda
            FormulaEvaluator evaluator = hssfWorkbook.getCreationHelper().createFormulaEvaluator();
            // For this example we'll loop through the rows getting the data we want
            // Para este ejemplo vamos a recorrer las filas obteniendo los datos que queremos    
            //System.out.println("INICIO");
            for (int fila = 0; fila <= rows; fila++) {
                //System.out.println(fila);
                hssfRow = hssfSheet.getRow(fila);
                if (hssfRow == null) {
                    break;
                } else {
                    //for (short c = 0; c < (cols = hssfRow.getLastCellNum()); c++) {
                    if (fila == 0) {
                        //PARA QUE SALTEE LA PRIMER FILA QUE TIENE EL TITULO
                        if (!ya_paso_primer_columna) {
                            ya_paso_primer_columna = true;
                        }
                        continue;
                    }
                    if ((hssfRow.getCell(7)) == null) {
                        continue;
                    }
                    if (hssfRow.getCell(7).getCellType() == Cell.CELL_TYPE_FORMULA) {
                        switch (hssfRow.getCell(7).getCachedFormulaResultType()) {
                            case Cell.CELL_TYPE_NUMERIC:
                                CellReference cellReference = new CellReference("H" + (fila));
                                Row row = hssfSheet.getRow(fila);
                                Cell cell1 = row.getCell(cellReference.getCol());
                                CellValue cellValue = evaluator.evaluate(cell1);
                                if (coincide_ubicacion(ubicacion, red, tipo_dispositivo, chequear_string_null(cellValue.getStringValue()))) {
                                    //System.out.println(chequear_string_null(fila+" --- "+cellValue.getStringValue()));
                                    lista.add(chequear_string_null(cellValue.getStringValue()));
                                }
                                break;
                        }
                    }

                }
            }
        } catch (FileNotFoundException fileNotFoundException) {
            System.out.println("The file not exists (No se encontró el fichero): " + fileNotFoundException);
        } catch (IOException ex) {
            System.out.println("Error in file procesing (Error al procesar el fichero): " + ex);
        } catch (Exception ex) {
            Logger.getLogger(jp_listado.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                excelStream.close();
            } catch (IOException ex) {
                System.out.println("Error in file processing after close it (Error al procesar el fichero después de cerrarlo): " + ex);
            }
        }
        //System.out.println("FIN");
        return lista;
    }

    ArrayList<String> devuelve_listado_Raspberry(String ubicacion, String red, String tipo_dispositivo) {
        InputStream excelStream = null;
        ArrayList<String> lista = new ArrayList<>();

        try {
            Boolean ya_paso_primer_columna = false;
            excelStream = new FileInputStream(new File("Administracion IP.xls"));
            // High level representation of a workbook.
            // Representación del más alto nivel de la hoja excel.
            HSSFWorkbook hssfWorkbook = new HSSFWorkbook(excelStream);
            // We chose the sheet is passed as parameter. 
            // Elegimos la hoja que se pasa por parámetro.
            HSSFSheet hssfSheet = hssfWorkbook.getSheetAt(5);//reemplazar por hoja 0, que tiene codigos deptos e ip, etc
            // An object that allows us to read a row of the excel sheet, and extract from it the cell contents.
            // Objeto que nos permite leer un fila de la hoja excel, y de aquí extraer el contenido de las celdas.
            HSSFRow hssfRow;
            // Initialize the object to read the value of the cell 
            // Inicializo el objeto que leerá el valor de la celda
            HSSFCell cell;
            // I get the number of rows occupied on the sheet
            // Obtengo el número de filas ocupadas en la hoja
            int rows = hssfSheet.getLastRowNum();
            // I get the number of columns occupied on the sheet
            // Obtengo el número de columnas ocupadas en la hoja
            int cols = 0;
            // A string used to store the reading cell
            // Cadena que usamos para almacenar la lectura de la celda
            FormulaEvaluator evaluator = hssfWorkbook.getCreationHelper().createFormulaEvaluator();
            // For this example we'll loop through the rows getting the data we want
            // Para este ejemplo vamos a recorrer las filas obteniendo los datos que queremos    
            //System.out.println("INICIO");
            for (int fila = 0; fila <= rows; fila++) {
                //System.out.println(fila);
                hssfRow = hssfSheet.getRow(fila);
                if (hssfRow == null) {
                    break;
                } else {
                    //for (short c = 0; c < (cols = hssfRow.getLastCellNum()); c++) {
                    if (fila == 0) {
                        //PARA QUE SALTEE LA PRIMER FILA QUE TIENE EL TITULO
                        if (!ya_paso_primer_columna) {
                            ya_paso_primer_columna = true;
                        }
                        continue;
                    }
                    if ((hssfRow.getCell(7)) == null) {
                        continue;
                    }
                    if (hssfRow.getCell(7).getCellType() == Cell.CELL_TYPE_FORMULA) {
                        switch (hssfRow.getCell(7).getCachedFormulaResultType()) {
                            case Cell.CELL_TYPE_NUMERIC:
                                CellReference cellReference = new CellReference("H" + (fila));
                                Row row = hssfSheet.getRow(fila);
                                Cell cell1 = row.getCell(cellReference.getCol());
                                CellValue cellValue = evaluator.evaluate(cell1);
                                if (coincide_ubicacion(ubicacion, red, tipo_dispositivo, chequear_string_null(cellValue.getStringValue()))) {
                                    //System.out.println(chequear_string_null(fila+" --- "+cellValue.getStringValue()));
                                    lista.add(chequear_string_null(cellValue.getStringValue()));
                                }
                                break;
                        }
                    }

                }
            }
        } catch (FileNotFoundException fileNotFoundException) {
            System.out.println("The file not exists (No se encontró el fichero): " + fileNotFoundException);
        } catch (IOException ex) {
            System.out.println("Error in file procesing (Error al procesar el fichero): " + ex);
        } catch (Exception ex) {
            Logger.getLogger(jp_listado.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                excelStream.close();
            } catch (IOException ex) {
                System.out.println("Error in file processing after close it (Error al procesar el fichero después de cerrarlo): " + ex);
            }
        }
        //System.out.println("FIN");
        return lista;
    }

    ArrayList<String> devuelve_listado_Notebooks(String ubicacion, String red, String tipo_dispositivo) {
        InputStream excelStream = null;
        ArrayList<String> lista = new ArrayList<>();

        try {
            Boolean ya_paso_primer_columna = false;
            excelStream = new FileInputStream(new File("Administracion IP.xls"));
            // High level representation of a workbook.
            // Representación del más alto nivel de la hoja excel.
            HSSFWorkbook hssfWorkbook = new HSSFWorkbook(excelStream);
            // We chose the sheet is passed as parameter. 
            // Elegimos la hoja que se pasa por parámetro.
            HSSFSheet hssfSheet = hssfWorkbook.getSheetAt(4);//reemplazar por hoja 0, que tiene codigos deptos e ip, etc
            // An object that allows us to read a row of the excel sheet, and extract from it the cell contents.
            // Objeto que nos permite leer un fila de la hoja excel, y de aquí extraer el contenido de las celdas.
            HSSFRow hssfRow;
            // Initialize the object to read the value of the cell 
            // Inicializo el objeto que leerá el valor de la celda
            HSSFCell cell;
            // I get the number of rows occupied on the sheet
            // Obtengo el número de filas ocupadas en la hoja
            int rows = hssfSheet.getLastRowNum();
            // I get the number of columns occupied on the sheet
            // Obtengo el número de columnas ocupadas en la hoja
            int cols = 0;
            // A string used to store the reading cell
            // Cadena que usamos para almacenar la lectura de la celda
            FormulaEvaluator evaluator = hssfWorkbook.getCreationHelper().createFormulaEvaluator();
            // For this example we'll loop through the rows getting the data we want
            // Para este ejemplo vamos a recorrer las filas obteniendo los datos que queremos    
            //System.out.println("INICIO");
            for (int fila = 0; fila <= rows; fila++) {
                //System.out.println(fila);
                hssfRow = hssfSheet.getRow(fila);
                if (hssfRow == null) {
                    break;
                } else {
                    //for (short c = 0; c < (cols = hssfRow.getLastCellNum()); c++) {
                    if (fila == 0) {
                        //PARA QUE SALTEE LA PRIMER FILA QUE TIENE EL TITULO
                        if (!ya_paso_primer_columna) {
                            ya_paso_primer_columna = true;
                        }
                        continue;
                    }
                    if ((hssfRow.getCell(8)) == null) {
                        continue;
                    }
                    if (hssfRow.getCell(8).getCellType() == Cell.CELL_TYPE_FORMULA) {
                        switch (hssfRow.getCell(8).getCachedFormulaResultType()) {
                            case Cell.CELL_TYPE_NUMERIC:
                                CellReference cellReference = new CellReference("I" + (fila));
                                Row row = hssfSheet.getRow(fila);
                                Cell cell1 = row.getCell(cellReference.getCol());
                                CellValue cellValue = evaluator.evaluate(cell1);
                                if (coincide_ubicacion(ubicacion, red, tipo_dispositivo, chequear_string_null(cellValue.getStringValue()))) {
                                    //System.out.println(chequear_string_null(fila+" --- "+cellValue.getStringValue()));
                                    lista.add(chequear_string_null(cellValue.getStringValue()));
                                }
                                break;
                        }
                    }

                }
            }
        } catch (FileNotFoundException fileNotFoundException) {
            System.out.println("The file not exists (No se encontró el fichero): " + fileNotFoundException);
        } catch (IOException ex) {
            System.out.println("Error in file procesing (Error al procesar el fichero): " + ex);
        } catch (Exception ex) {
            Logger.getLogger(jp_listado.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                excelStream.close();
            } catch (IOException ex) {
                System.out.println("Error in file processing after close it (Error al procesar el fichero después de cerrarlo): " + ex);
            }
        }
        //System.out.println("FIN");
        return lista;
    }

    Boolean coincide_ubicacion(String ubicacion, String red, String tipo_dispositivo, String celda) {
        String celda_ubicacion, celda_red, celda_tipo;

        celda_ubicacion = celda.substring(0, 1);
        celda_red = celda.substring(1, 3);
        celda_tipo = celda.substring(3, 4);

        if (ubicacion.equals(celda_ubicacion) && red.equals(celda_red) && tipo_dispositivo.equals(celda_tipo)) {
            return true;
        }
        return false;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cmb_tipo_direccion;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tbl_listado;
    private javax.swing.JTextField txt_tipo_direccion;
    // End of variables declaration//GEN-END:variables
}
